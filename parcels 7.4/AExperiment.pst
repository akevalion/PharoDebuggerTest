<?xml version="1.0"?><st-source><!-- Name: AExperimentBundleName: AExperimentBundleStructure: a Store.BundleForParcelParcel: #('AExperiment')ParcelName: AExperimentDate: 8:05:58 am April 22, 2021 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on April 22, 2021 at 8:05:58 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AddAssertRefactorDialog</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nodeValue strategies stackList nodeName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>Experiment</package></attributes></class><class><name>AssertRefactorAbstract</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>varName flag nodeName </inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>Experiment-AssertRefactor</category><attributes><package>Experiment-AssertRefactor</package></attributes></class><class><name>AssertBasicRefactor</name><environment>Smalltalk</environment><super>AssertRefactorAbstract</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Experiment-AssertRefactor</category><attributes><package>Experiment-AssertRefactor</package></attributes></class><class><name>AssertRefactorMustBe</name><environment>Smalltalk</environment><super>AssertBasicRefactor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clazzName </inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>My Classes</category><attributes><package>Experiment-AssertRefactor</package></attributes></class><class><name>AssertRefactorIsNil</name><environment>Smalltalk</environment><super>AssertBasicRefactor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>My Classes</category><attributes><package>Experiment-AssertRefactor</package></attributes></class><class><name>AssertRefactorIsCollection</name><environment>Smalltalk</environment><super>AssertBasicRefactor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clazzName </inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>My Classes</category><attributes><package>Experiment-AssertRefactor</package></attributes></class><class><name>ExperimentExample</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Experiment</category><attributes><package>Experiment</package></attributes></class><class><name>AddAssertRefactoring</name><environment>Smalltalk</environment><super>Refactory.Browser.MethodRefactoring</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interval selector varName assertList </inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>Experiment</category><attributes><package>Experiment</package></attributes></class><class><name>AssertDebuggerRefactor</name><environment>Smalltalk</environment><super>AssertRefactorAbstract</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Experiment-AssertRefactor</category><attributes><package>Experiment-AssertRefactor</package></attributes></class><class><name>AssertDebuggerZeroDivide</name><environment>Smalltalk</environment><super>AssertDebuggerRefactor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Experiment-AssertRefactor</category><attributes><package>Experiment-AssertRefactor</package></attributes></class><class><name>AssertRefactorHasNil</name><environment>Smalltalk</environment><super>AssertBasicRefactor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>My Classes</category><attributes><package>Experiment-AssertRefactor</package></attributes></class><methods><class-id>AddAssertRefactorDialog</class-id> <category>accessing</category><body package="Experiment" selector="nodeName:">nodeName: aString	nodeName := aString</body><body package="Experiment" selector="nodeValue:">nodeValue: anObject	nodeValue := anObject.</body><body package="Experiment" selector="stackList:">stackList: aCollection	stackList := aCollection</body><body package="Experiment" selector="strategies">strategies	^ strategies select: [:strat | strat flag value ]</body></methods><methods><class-id>AddAssertRefactorDialog</class-id> <category>opening</category><body package="Experiment" selector="openDialog">openDialog	| spec bb dialog |	dialog := SimpleDialog new.	spec := dialog interfaceSpecFor: #emptySpec.	dialog builder 		add: spec window;		add: spec component.	dialog setInitialGap; minWidth: 400.	strategies := AssertBasicRefactor subclasses collect: [:cls | cls new ].	stackList ifNotNil: [ strategies := strategies, (AssertDebuggerRefactor strategiesFor: stackList) ].	(strategies asSortedCollection: [:a :b | a order &lt; b order]) do: [:strat | 		strat 			nodeValue: nodeValue;			nodeName: nodeName;			renderIn: dialog ].	dialog addOK: [ strategies allSatisfy: [:strat | strat validate ] ].	dialog addGap: 10.	dialog preOpen.	bb :=  dialog builder window displayBox.	dialog builder window		maximumSize: Screen default bounds extent;		minimumSize: 150@ bb height;		label: 'Please select for ''', nodeName, ''''.			dialog builder openDialogWithExtent: bb extent.</body></methods><methods><class-id>AddAssertRefactorDialog</class-id> <category>testing</category><body package="Experiment" selector="hasList">hasList	^ self strategies isNotEmpty</body></methods><methods><class-id>AssertRefactorAbstract</class-id> <category>initialize-release</category><body package="Experiment-AssertRefactor" selector="initialize">initialize	^self</body></methods><methods><class-id>AssertRefactorAbstract</class-id> <category>accessing</category><body package="Experiment-AssertRefactor" selector="flag">flag	^ flag ifNil: [ flag := false asValue ].</body><body package="Experiment-AssertRefactor" selector="nodeName:">nodeName: aString	nodeName := aString</body><body package="Experiment-AssertRefactor" selector="nodeNameQ">nodeNameQ	^ '''', nodeName, ''''</body><body package="Experiment-AssertRefactor" selector="nodeValue:">nodeValue: anObject	anObject ifNil: [^ self].	self clazzName ifNotNil: [ :var | var value: anObject class name ]</body><body package="Experiment-AssertRefactor" selector="varName:">varName: aString	varName := aString</body></methods><methods><class-id>AssertRefactorAbstract</class-id> <category>hooks</category><body package="Experiment-AssertRefactor" selector="clazzName">clazzName	^ nil</body><body package="Experiment-AssertRefactor" selector="description">description	^ self subclassResponsibility</body><body package="Experiment-AssertRefactor" selector="label">label	^ self subclassResponsibility</body><body package="Experiment-AssertRefactor" selector="message">message	^ self subclassResponsibility</body><body package="Experiment-AssertRefactor" selector="order">order	^ 0</body></methods><methods><class-id>AssertRefactorAbstract</class-id> <category>testing</category><body package="Experiment-AssertRefactor" selector="hasText">hasText	^ self clazzName notNil</body><body package="Experiment-AssertRefactor" selector="validate">validate	^ true</body></methods><methods><class-id>AssertRefactorAbstract</class-id> <category>public</category><body package="Experiment-AssertRefactor" selector="addNewMessageIn:">addNewMessageIn: statements	| arg1 arg2 selector args |	arg1 := self message.		arg2 := self description.	arg1 := RBBlockNode body: arg1.	selector := #assert:description:.	arg2 := RBLiteralNode literalToken: (RBLiteralToken value: arg2 start: nil stop: nil).	args := Array with: arg1 with: arg2.		statements addFirst: (RBMessageNode		receiver: (RBVariableNode named: 'self')		selector: selector		arguments: args ).</body><body package="Experiment-AssertRefactor" selector="foundClass">foundClass	| ref |	ref := self clazzName value asQualifiedReference.	^ (ref isDefined and: [ref binding isForClass ])		ifTrue: [ ref value ]		ifFalse: [ nil ]	</body><body package="Experiment-AssertRefactor" selector="renderCheckBoxIn:height:">renderCheckBoxIn: dialog height: height	| builder layout field |	builder := dialog builder.	layout := LayoutFrame		leftFraction: 0 offset: 10		topFraction: 0 offset: height		rightFraction: 0 offset: 200		bottomFraction: 0 offset: height + 30.	field := CheckBoxSpec 		model: self flag		label: self label		layout: layout.	builder add: field.</body><body package="Experiment-AssertRefactor" selector="renderIn:">renderIn: dialog	| height | 	height := dialog builder window displayBox height.	self hasText		ifTrue: [ self renderInputFieldIn: dialog height: height].	self renderCheckBoxIn: dialog height: height.	dialog addGap: 30.</body><body package="Experiment-AssertRefactor" selector="renderInputFieldIn:height:">renderInputFieldIn: dialog height: height	| builder layout field |	builder := dialog builder.	layout := LayoutFrame		leftFraction: 0 offset: 210		topFraction: 0 offset: height+5		rightFraction: 1 offset: -10		bottomFraction: 0 offset: height + 25.	field := InputFieldSpec 		model: self clazzName		menu: nil		layout: layout.	builder add: field.</body></methods><methods><class-id>AssertRefactorMustBe</class-id> <category>initialize-release</category><body package="Experiment-AssertRefactor" selector="initialize">initialize	^self</body></methods><methods><class-id>AssertRefactorMustBe</class-id> <category>hooks</category><body package="Experiment-AssertRefactor" selector="clazzName">clazzName	^ clazzName ifNil: [ clazzName := '' asValue ].</body><body package="Experiment-AssertRefactor" selector="description">description	^ 'Must be kind of ', self clazzName value</body><body package="Experiment-AssertRefactor" selector="label">label	^ self nodeNameQ, 's type must be'</body><body package="Experiment-AssertRefactor" selector="message">message	^ RBMessageNode		receiver: (RBVariableNode named: varName)		selector: #isKindOf:		arguments: (Array with: (RBVariableNode named: self foundClass fullName))</body><body package="Experiment-AssertRefactor" selector="order">order	^ 2</body></methods><methods><class-id>AssertRefactorMustBe</class-id> <category>testing</category><body package="Experiment-AssertRefactor" selector="validate">validate	(self flag value and: [self foundClass isNil]) ifTrue: [		Dialog warn: 'Enter a valid class for: Type of must be'.		^ false	].	^ true</body></methods><methods><class-id>AssertRefactorMustBe class</class-id> <category>instance creation</category><body package="Experiment-AssertRefactor" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AssertRefactorIsNil</class-id> <category>initialize-release</category><body package="Experiment-AssertRefactor" selector="initialize">initialize	^self</body></methods><methods><class-id>AssertRefactorIsNil</class-id> <category>hooks</category><body package="Experiment-AssertRefactor" selector="description">description	^ 'Can not be nil'</body><body package="Experiment-AssertRefactor" selector="label">label	^ self nodeNameQ, ' must not be nil'</body><body package="Experiment-AssertRefactor" selector="message">message	^ RBMessageNode		receiver: (RBVariableNode named: varName)		selector: #notNil</body><body package="Experiment-AssertRefactor" selector="order">order	^ 1</body></methods><methods><class-id>AssertRefactorIsNil class</class-id> <category>instance creation</category><body package="Experiment-AssertRefactor" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AssertRefactorIsCollection</class-id> <category>initialize-release</category><body package="Experiment-AssertRefactor" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AssertRefactorIsCollection</class-id> <category>hooks</category><body package="Experiment-AssertRefactor" selector="clazzName">clazzName	^ clazzName ifNil: [ clazzName := '' asValue ].</body><body package="Experiment-AssertRefactor" selector="description">description	^  'Should be a collection with elements of kind ', self clazzName value</body><body package="Experiment-AssertRefactor" selector="label">label	^ self nodeNameQ, ' is collection of type:'</body><body package="Experiment-AssertRefactor" selector="message">message	| block |	block := RBBlockNode 		arguments: (Array with: (RBVariableNode named: 'each'))		body: (RBMessageNode			receiver: (RBVariableNode named: 'each')			selector:  #isKindOf:			arguments: (Array with: (RBVariableNode named: self foundClass fullName)) ).	^ RBMessageNode		receiver: (RBVariableNode named: varName)		selector: #allSatisfy:		arguments: (Array with: block)</body><body package="Experiment-AssertRefactor" selector="order">order	^ 3</body></methods><methods><class-id>AssertRefactorIsCollection</class-id> <category>testing</category><body package="Experiment-AssertRefactor" selector="validate">validate	(self flag value and: [self foundClass isNil]) ifTrue: [		Dialog warn: 'Enter a valid class for: isCollection of Type'.		^ false	].	^ true</body></methods><methods><class-id>AssertRefactorIsCollection class</class-id> <category>instance creation</category><body package="Experiment-AssertRefactor" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>ExperimentExample</class-id> <category>initialize-release</category><body package="Experiment" selector="exampleWithArg:">exampleWithArg: arg 	"	self new exampleWithArg: 0.	"	"extractMethod"	123 / arg.	Refactory.Browser.BrowserCodeTool initializeMenus.	Refactory.Browser.RefactoringBrowser initializeMenus.	Refactory.Browser.BrowserTextTool initializeMenus.	DebuggerClient initialize</body><body package="Experiment" selector="exampleWithArg:with:">exampleWithArg: arg1 with: arg2 	"	self new exampleWithArg: 0 with: true.	"	self assert: [(arg1 notNil)] description: 'Can not be nil'.	1 / arg1</body><body package="Experiment" selector="initialize">initialize</body></methods><methods><class-id>ExperimentExample class</class-id> <category>instance creation</category><body package="Experiment" selector="new">new	"Answer a newly created and initialized instance."	^super new</body></methods><methods><class-id>AddAssertRefactoring</class-id> <category>initialize-release</category><body package="Experiment" selector="initialize">initialize</body></methods><methods><class-id>AddAssertRefactoring</class-id> <category>preconditions</category><body package="Experiment" selector="extractVarName">extractVarName	| code |	interval first &gt; interval last 		ifTrue: [ self refactoringError: #InvalidVariableName &lt;&lt; #browser &gt;&gt; 'Invalid variable name' ].	(code := class sourceCodeFor: selector) size &lt; interval last 		ifTrue: [ self refactoringError: #InvalidRangeForVariable &lt;&lt; #browser &gt;&gt; 'Invalid range for variable' ].	^ varName := (code copyFrom: interval first to: interval last) asString.</body><body package="Experiment" selector="preconditions">preconditions	^(Condition definesSelector: selector in: class)	&amp; (Condition withBlock:  [		self extractVarName.		true])</body></methods><methods><class-id>AddAssertRefactoring</class-id> <category>transforming</category><body package="Experiment" selector="transform">transform	| tree method statements |	method := class methodFor: selector.	tree := method parseTree.	tree isNil 		ifTrue: [ self refactoringError: #CouldNotParseMethod &lt;&lt; #browser &gt;&gt; 'Could not parse method' ].	statements := tree body statements.	assertList reverseDo: [:newAssert |		newAssert 			varName: varName;			addNewMessageIn: statements ].		method compileTree: tree</body></methods><methods><class-id>AddAssertRefactoring</class-id> <category>accessing</category><body package="Experiment" selector="assertList:">assertList: aList	assertList := aList</body><body package="Experiment" selector="class:">class: aClass	class := self classObjectFor: aClass.</body><body package="Experiment" selector="from:">from: anInterval	interval := anInterval</body><body package="Experiment" selector="selector:">selector: aString	selector := aString</body></methods><methods><class-id>AddAssertRefactoring class</class-id> <category>testing</category><body package="Experiment" selector="validate:">validate: aNode	^ (aNode isNil or: [ aNode isVariable not ]) ifTrue: [		Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the variable'.		false]	ifFalse: [ true]</body></methods><methods><class-id>AssertDebuggerRefactor</class-id> <category>initialize-release</category><body package="Experiment-AssertRefactor" selector="initialize">initialize	^self</body></methods><methods><class-id>AssertDebuggerRefactor</class-id> <category>hooks</category><body package="Experiment-AssertRefactor" selector="order">order	^ 10</body></methods><methods><class-id>AssertDebuggerRefactor class</class-id> <category>instance creation</category><body package="Experiment-AssertRefactor" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AssertDebuggerRefactor class</class-id> <category>public</category><body package="Experiment-AssertRefactor" selector="canHandle:">canHandle: stackList	^ false</body><body package="Experiment-AssertRefactor" selector="strategiesFor:">strategiesFor: stackList	| validClasses |	validClasses := self subclasses select: [:cls | cls canHandle: stackList ].	^ validClasses collect: [:cls | cls new ]	</body></methods><methods><class-id>AssertDebuggerZeroDivide</class-id> <category>hooks</category><body package="Experiment-AssertRefactor" selector="description">description	^ 'Can not be zero'</body><body package="Experiment-AssertRefactor" selector="label">label	^ self nodeNameQ, 'division by Zero'</body><body package="Experiment-AssertRefactor" selector="message">message	^ RBMessageNode		receiver: (RBMessageNode			receiver: (RBVariableNode named: varName)			selector: #isZero)		selector: #not.</body></methods><methods><class-id>AssertDebuggerZeroDivide class</class-id> <category>public</category><body package="Experiment-AssertRefactor" selector="canHandle:">canHandle: stackList	| methodContext |	methodContext := stackList first.		^ (methodContext selector = #raise:receiver:selector:arg:errorString:) 		and: [ (methodContext slotAt: 1) = #divisionByZeroSignal]</body></methods><methods><class-id>AssertRefactorHasNil</class-id> <category>initialize-release</category><body package="Experiment-AssertRefactor" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>AssertRefactorHasNil</class-id> <category>hooks</category><body package="Experiment-AssertRefactor" selector="description">description	^ 'Should not include nil'</body><body package="Experiment-AssertRefactor" selector="label">label	^ self nodeNameQ,' is collection without nil'</body><body package="Experiment-AssertRefactor" selector="message">message	^  RBMessageNode		receiver: (RBVariableNode named: varName)		selector: #includes:		arguments: (Array with: (RBVariableNode named: 'nil'))</body><body package="Experiment-AssertRefactor" selector="order">order	^ 4</body></methods><methods><class-id>AssertRefactorHasNil class</class-id> <category>instance creation</category><body package="Experiment-AssertRefactor" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>UI.TextEditorController</class-id> <category>private</category><body package="Experiment" selector="getDispatchTable">getDispatchTable	dispatchTable := super getDispatchTable.	dispatchTable bindValue: #processTabKey: to: Character tab.	dispatchTable bindValue: #processTabKey: to: #BackTab.	dispatchTable bindValue: #displayCRKey: to: Character cr.	self supportCodeEditingFeels ifTrue: [		dispatchTable bindValue: #useAssertKey: to: (Character value: 21).	].	^dispatchTable</body></methods><methods><class-id>UI.TextEditorController</class-id> <category>editing</category><body package="Experiment" selector="useAssertKey:">useAssertKey: aCharEvent	"If no extra keys, accept.  If the control key is held, cancel.  If the alt key is held, undo."	self performer useAssertDescription	</body></methods><methods><class-id>Refactory.Browser.RBCommand class</class-id> <category>actions-initialization</category><body package="Experiment" selector="actionArray">actionArray	"This method was automatically generated from 'Refactory.Browser.RBActionEditor open'"	^#(#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AbstractClassInstanceVariable #defaultString: 'Abstract Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AbstractClassInstanceVariableDesc #defaultString: 'Create accessing methods for a class instance variable and change all direct variable references to use them' #catalogID: #browser) #abstractClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AbstractInstanceVariable #defaultString: 'Abstract Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AbstractInstanceVariableDesc #defaultString: 'Create accessing methods for an instance variable and change all direct variable references to use them' #catalogID: #browser) #abstractInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AbstractSelectedInstanceVariable #defaultString: 'Abstract Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AbstractSelectedInstanceVariableDesc #defaultString: 'Abstract all references to the selected variable to use accessing methods' #catalogID: #browser) #abstractInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #Accept #defaultString: 'Accept' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AcceptDesc #defaultString: 'Save the current text' #catalogID: #browser) #acceptText #isEditing #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddActionSpecification #defaultString: 'Add Action Specification' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddActionSpecificationDesc #defaultString: 'Create a new action specification' #catalogID: #browser) #addSpecification nil #yourself)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddCategory #defaultString: 'Add Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddCategoryDesc #defaultString: 'Create a new category' #catalogID: #browser) #addCategory nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddClassInstanceVariable #defaultString: 'Add Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddClassInstanceVariableDesc #defaultString: 'Add a class instance variable to the selected class' #catalogID: #browser) #addClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddFromChangeSet #defaultString: 'Add from Change Set' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddFromChangeSetDesc #defaultString: 'Add contents of the current change set' #catalogID: #browser) #checkChangeSet nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddInstanceVariable #defaultString: 'Add Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddInstanceVariableDesc #defaultString: 'Add an instance variable to the selected class' #catalogID: #browser) #addInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddParameter #defaultString: 'Add Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddParameterDesc #defaultString: 'Add a parameter to the selected method and change all senders to pass a default argument' #catalogID: #browser) #addParameter #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #AddProtocol #defaultString: 'Add Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #AddProtocolDesc #defaultString: 'Add a new protocol to the class' #catalogID: #browser) #addProtocol #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BindTemporaryToTightestScope #defaultString: 'Bind Temporary to Tightest Scope' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BindTemporaryToTightestScopeDesc #defaultString: 'Move a temporary variable''s definition to the innermost scope in which it is used' #catalogID: #browser) #bindTight #hasTemporarySelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseChangeSetMethodVersions #defaultString: 'Browse Change Set Method Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BrowseChangeSetMethodVersionsDesc #defaultString: 'Open a change list on all versions of the method in the .cha file.' #catalogID: #browser) #browseMethodChanges #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseClassMethodsMatchingString #defaultString: 'Browse Class Methods Matching String' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BrowseClassMethodsMatchingStringDesc #defaultString: 'Open a browser on all methods of the selected class matching a pattern.' #catalogID: #browser) #browseMethodsWithSourceMatching #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseOverridden #defaultString: 'Browse Overridden' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BrowseOverriddenDesc #defaultString: 'Browse all methods overridden by other components' #catalogID: #browser) #browseOverridden #isCodeComponentSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseOverrides #defaultString: 'Browse Overrides' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BrowseOverridesDesc #defaultString: 'Browse all methods overridden by the current selection' #catalogID: #browser) #browseOverrides #isCodeComponentSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #BrowseReferencesToClass #defaultString: 'Browse References to Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassReferencesDesc #defaultString: 'Browse all references to the selected class' #catalogID: #browser) #browseReferencesToGlobal #hasClassSelected #activeTool)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #Buffers #defaultString: 'Buffers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #BuffersDesc #defaultString: 'Dynamic menu of buffers' #catalogID: #browser) #bufferMenuSpecifications nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ByteIndexedClassTemplate #defaultString: 'Byte Indexed Class Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ByteIndexedClassTemplateDesc #defaultString: 'Display a template for creating a byte-indexed class' #catalogID: #browser) #showBytesClassTemplate #canDefineClassesAndNameSpaces #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CancelDesc #defaultString: 'Cancel changes and revert to the original text' #catalogID: #browser) #cancelText #isEditing #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllCategories #defaultString: 'Check All Categories' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllCategoriesDesc #defaultString: 'Add all categories matching an expression' #catalogID: #browser) #checkAllCategories nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllClasses #defaultString: 'Check All Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllClassesDesc #defaultString: 'Add all classes matching a pattern' #catalogID: #browser) #checkAllClasses #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllImplementors #defaultString: 'Check All Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllImplementorsDesc #defaultString: 'Add all implementors of the selected method' #catalogID: #browser) #checkImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllMethods #defaultString: 'Check All Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllMethodsDesc #defaultString: 'Add all methods matching a pattern' #catalogID: #browser) #checkAllSelectors #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllProtocols #defaultString: 'Check All Protocols' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllProtocolsDesc #defaultString: 'Add all protocols matching a pattern' #catalogID: #browser) #checkAllProtocols #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllSenders #defaultString: 'Check All Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllSendersDesc #defaultString: 'Add all senders of the selected method' #catalogID: #browser) #checkSenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllSubclasses #defaultString: 'Check All Subclasses' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllSubclassesDesc #defaultString: 'Add all the class'' subclasses' #catalogID: #browser) #checkSubclasses #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckAllSuperclasses #defaultString: 'Check All Superclasses' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckAllSuperclassesDesc #defaultString: 'Add all the class'' superclasses' #catalogID: #browser) #checkSuperclasses #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckCategory #defaultString: 'Check Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckCategoryDesc #defaultString: 'Add the selected categories' #catalogID: #browser) #checkCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckClass #defaultString: 'Check Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckClassDesc #defaultString: 'Add the selected class' #catalogID: #browser) #checkClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckMethod #defaultString: 'Check Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckMethodDesc #defaultString: 'Add the selected methods' #catalogID: #browser) #checkSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckProtocol #defaultString: 'Check Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckProtocolDesc #defaultString: 'Add the selected protocols' #catalogID: #browser) #checkProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CheckProtocols #defaultString: 'Check Protocols' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CheckProtocolsDesc #defaultString: 'Verify that both the selected class and its superclass use the same protocols' #catalogID: #browser) #checkProtocols #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ClassesDefiningVariable #defaultString: 'Classes Defining Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReferencesToSymbolDesc #defaultString: 'Find references to a symbol within the current scope of the browser' #catalogID: #browser) #browseVariables nil #browser)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #CodeModelToolsMenu #defaultString: 'Code Model Tools Menu' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CodeModelToolsMenuDesc #defaultString: 'List of tool views supported by the code model' #catalogID: #browser) #selectionPolicyMenuSpecifications nil #codeModel)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ContextHelp #defaultString: 'Context Help' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ContextHelpDesc #defaultString: 'Open context sensitive help' #catalogID: #browser) #help nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ConvertTemporaryVariableToInstanceVariable #defaultString: 'Convert Temporary Variable to Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ConvertTemporaryVariableToInstanceVariableDesc #defaultString: 'Convert the selected temporary variable to an instance variable' #catalogID: #browser) #createInstVar #canPerformTemporaryVariableRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ConvertToSibling #defaultString: 'Convert to Sibling' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ConvertToSiblingDesc #defaultString: 'Create an abstract class and make the selected class a sibling with its subclasses under the new abstract class' #catalogID: #browser) #convertToSibling #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CopySelection #defaultString: 'Copy Selection' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Copy #defaultString: 'Copy' #catalogID: #browser) #copySelection #isTextSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateBuffer #defaultString: 'Create Buffer' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateBufferDesc #defaultString: 'Create a new view' #catalogID: #browser) #newBuffer nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateClassInstanceVariableAccessors #defaultString: 'Create Class Instance Variable Accessors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateInstanceVariableAccessorsDesc #defaultString: 'Create accessing methods for the selected instance variable' #catalogID: #browser) #createClassInstanceVariableAccessors #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateInstanceVariableAccessors #defaultString: 'Create Instance Variable Accessors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateInstanceVariableAccessorsDesc #defaultString: 'Create accessing methods for the selected instance variable' #catalogID: #browser) #createInstanceVariableAccessors #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateSelectedInstanceVariableAccessors #defaultString: 'Create Selected Instance Variable Accessors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateInstanceVariableAccessorsDesc #defaultString: 'Create accessing methods for the selected instance variable' #catalogID: #browser) #createInstanceVariableAccessors #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CreateSubclass #defaultString: 'Create Subclass' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CreateSubclassDesc #defaultString: 'Insert a class into the class hierarchy under the currently selected class' #catalogID: #browser) #createSubclass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CutSelection #defaultString: 'Cut Selection' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Cut #defaultString: 'Cut' #catalogID: #browser) #cut #isTextSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #DebugIt #defaultString: 'Debug It' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #DebugItDesc #defaultString: 'Open a debugger on the currently selected code' #catalogID: #browser) #debugIt nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #DoIt #defaultString: 'Do It' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #DoItDesc #defaultString: 'Execute the selected text' #catalogID: #browser) #doIt nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ExplainCode #defaultString: 'Explain Code' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ExplainCodeDesc #defaultString: 'Explain the selected piece of code' #catalogID: #browser) #explain #isTextSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ExtractMethod #defaultString: 'Extract Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ExtractMethodDesc #defaultString: 'Extract the selected code into a new method' #catalogID: #browser) #extractMethod #canExtractMethod #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ExtractMethodToComponent #defaultString: 'Extract Method to Component' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ExtractMethodToComponentDesc #defaultString: 'Extract the selected code into a method in a different class' #catalogID: #browser) #extractToComponent #canExtractMethod #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ExtractToTemporary #defaultString: 'Extract to Temporary' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ExtractToTemporaryDesc #defaultString: 'Create a temporary variable assigned to the selection and replace it with the temporary' #catalogID: #browser) #extractToTemp #canExtractToTemporary #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileIntoPackage #defaultString: 'File Into Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileIntoPackageDesc #defaultString: 'Load Smalltalk source, compiling it into the selected package' #catalogID: #browser) #storeFileinPackage #isPackageSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutCategory #defaultString: 'File Out Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutCategoryDesc #defaultString: 'File-out the selected categories' #catalogID: #browser) #fileOutCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutClass #defaultString: 'File Out Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutClassDesc #defaultString: 'File-out the selected classes' #catalogID: #browser) #fileOutClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdFileOutGlobal #defaultString: 'File Out Global' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdFileOutGlobalDesc #defaultString: 'File-out the selected class or namespace' #catalogID: #browser) #fileOutGlobal #isGlobalSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutMethod #defaultString: 'File Out Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutMethodDesc #defaultString: 'File-out the selected methods' #catalogID: #browser) #fileOutMessage #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutPackage #defaultString: 'File Out Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutPackageDesc #defaultString: 'File-out the selected package' #catalogID: #browser) #storeFileoutPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutPackageChanges #defaultString: 'File Out Package Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutPackageChangesDesc #defaultString: 'File-out the selected package''s changes' #catalogID: #browser) #storeFileoutPundleChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutPackageDifferences #defaultString: 'File Out Package Differences' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutPackageDifferencesDesc #defaultString: 'File-out the differences between the selected package and a version saved in the repository' #catalogID: #browser) #storeFileoutPundleDifferences #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FileOutProtocol #defaultString: 'File Out Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FileOutProtocolDesc #defaultString: 'File-out all methods in the selected protocols' #catalogID: #browser) #fileOutProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindAllReferencePathsTo #defaultString: 'Find All Reference Paths to' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindAllReferencePathsToDesc #defaultString: 'Inspect all paths from Root to an object for which the specified block answers true' #catalogID: #browser) #findAllReferencePaths nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindClass #defaultString: 'Find Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindClassDesc #defaultString: 'Find a class' #catalogID: #browser) #findClass nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdFindGlobalName #defaultString: 'Find Global Name' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdFindGlobalNameDesc #defaultString: 'Find a class, a shared variable, or a name space' #catalogID: #browser) #findGlobalName nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindMethod #defaultString: 'Find Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindMethodDesc #defaultString: 'Find a method within the selected class' #catalogID: #browser) #findMethodAndSelectAlphabetic #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindNameSpace #defaultString: 'Find Name Space' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindNameSpaceDesc #defaultString: 'Find a name space.' #catalogID: #browser) #findNameSpace nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindPackage #defaultString: 'Find Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindPackageDesc #defaultString: 'Find a bundle or package' #catalogID: #browser) #findPundle nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindReferencePathTo #defaultString: 'Find Reference Path to' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindReferencePathToDesc #defaultString: 'Inspect the path from Root to an object for which the specified block answers true' #catalogID: #browser) #findReferencePath nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindReferencePathToAnInstance #defaultString: 'Find Reference Path to an Instance' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindReferencePathToAnInstanceDesc #defaultString: 'Inspect the path of references from Root to any instance of this class' #catalogID: #browser) #findReferencePathToInstance #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindReferencePathsToAllInstances #defaultString: 'Find Reference Paths to All Instances' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindReferencePathsToAllInstancesDesc #defaultString: 'Inspect all reference paths from Root to any instance of this class' #catalogID: #browser) #findAllReferencesToInstances #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindSharedVariable #defaultString: 'Find Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindSharedVariableDesc #defaultString: 'Find a Shared Variable' #catalogID: #browser) #findSharedVariable nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FindText #defaultString: 'Find Text' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FindTextDesc #defaultString: 'Find the specified text' #catalogID: #browser) #find #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #FormatCode #defaultString: 'Format Code' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #FormatCodeDesc #defaultString: 'Format a method' #catalogID: #browser) #format nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GenerateDefaultClassComment #defaultString: 'Generate Default Class Comment' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GenerateDefaultClassCommentDesc #defaultString: 'Generate a default class comment for the selected class' #catalogID: #browser) #generateDefaultComment nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableReaders #defaultString: 'Global Class Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing a class instance variable' #catalogID: #browser) #globalClassInstanceVariableReaders #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableReferences #defaultString: 'Global Class Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableReferencesDesc #defaultString: 'Browse all references to a class instance variable' #catalogID: #browser) #globalClassInstanceVariableReferences #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableWriters #defaultString: 'Global Class Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying a class instance variable' #catalogID: #browser) #globalClassInstanceVariableWriters #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalClassReferences #defaultString: 'Global Class References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalClassReferencesDesc #defaultString: 'Browse all references to the selected class' #catalogID: #browser) #globalClassRefs #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalImplementors #defaultString: 'Global Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsDesc #defaultString: 'Browse all implementors of the selected method' #catalogID: #browser) #browseGlobalImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #GlobalImplementorsActions #defaultString: 'Global Implementors Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsActionsDesc #defaultString: 'Actions for Implementors' #catalogID: #browser) #globalImplementorsActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableReaders #defaultString: 'Global Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing an instance variable' #catalogID: #browser) #globalInstanceVariableReaders #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableReferences #defaultString: 'Global Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableReferencesDesc #defaultString: 'Browse all references to an instance variable' #catalogID: #browser) #globalInstanceVariableReferences #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableWriters #defaultString: 'Global Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying an instance variable' #catalogID: #browser) #globalInstanceVariableWriters #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalReferences #defaultString: 'Global References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReferencesDesc #defaultString: 'Browse all references to the specified shared variable' #catalogID: #browser) #browseReferencesToGlobal #hasGlobalSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalSenders #defaultString: 'Global Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SendersDesc #defaultString: 'Browse all senders of the selected method' #catalogID: #browser) #browseGlobalSenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #GlobalSendersActions #defaultString: 'Global Senders Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SendersActionsDesc #defaultString: 'Actions for Senders' #catalogID: #browser) #globalSendersActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #GlobalSharedVariableReferences #defaultString: 'Global Shared Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #GlobalSharedVariableReferencesDesc #defaultString: 'Browse all references to a shared variable' #catalogID: #browser) #globalSharedVariableReferences #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyCategory #defaultString: 'Hardcopy Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyCategoryDesc #defaultString: 'Print the selected categories' #catalogID: #browser) #hardcopyCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyClass #defaultString: 'Hardcopy Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyClassDesc #defaultString: 'Print the selected classes' #catalogID: #browser) #printOutClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyMethod #defaultString: 'Hardcopy Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyMethodDesc #defaultString: 'Print the selected methods' #catalogID: #browser) #printOutMessage #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyProtocol #defaultString: 'Hardcopy Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyProtocolDesc #defaultString: 'Print all methods in the selected protocols' #catalogID: #browser) #printOutProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HardcopyText #defaultString: 'Hardcopy Text' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HardcopyTextDesc #defaultString: 'Print the current text' #catalogID: #browser) #hardcopy #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HierarchyImplementors #defaultString: 'Hierarchy Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HierarchyImplementorsDesc #defaultString: 'Browse all implementors of the selected method within the hierarchy' #catalogID: #browser) #browseHierarchyImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #HierarchyImplementorsActions #defaultString: 'Hierarchy Implementors Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HierarchyImplementorsActionsDesc #defaultString: 'Dynamic menu of hierarchy implementors.' #catalogID: #browser) #hierarchyImplementorsActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #HierarchySenders #defaultString: 'Hierarchy Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HierarchySendersDesc #defaultString: 'Browse all senders of the specified method in the hierarchy' #catalogID: #browser) #browseHierarchySenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #HierarchySendersActions #defaultString: 'Hierarchy Senders Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #HierarchySendersActionsDesc #defaultString: 'Dynamic menu of hierarchy senders' #catalogID: #browser) #hierarchySendersActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdHighlightSelection #defaultString: 'Highlight Selection' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdHighlightSelectionDesc #defaultString: 'Highlight all occurrences of selection' #catalogID: #browser) #highlightSelection #isTextSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #IconHelp #defaultString: 'Icon Help' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #IconHelpDesc #defaultString: 'Opens help for the browser''s icons.' #catalogID: #browser) #iconsHelp nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ImplementorsMatching #defaultString: 'Implementors Matching' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsMatchingDesc #defaultString: 'Find all implementors whose selector matches the selector within the current scope of the browser' #catalogID: #browser) #browseImplementors nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #IndexedClassTemplate #defaultString: 'Indexed Class Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #IndexedClassTemplateDesc #defaultString: 'Display a template for creating an indexed class' #catalogID: #browser) #showIndexedClassTemplate #canDefineClassesAndNameSpaces #activeTool)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #InheritedClassesSpecifications #defaultString: 'Inherited Classes Specifications' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InheritedClassesSpecificationsDesc #defaultString: 'A dynamic menu showing the superclasses for inheriting methods. ' #catalogID: #browser) #inheritToSpecifications #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InitializeSharedVariable #defaultString: 'Initialize Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InitializeSharedVariableDesc #defaultString: 'Initialize a shared variable' #catalogID: #browser) #initializeSharedVariable #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineAllSelfSends #defaultString: 'Inline All Self Sends' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineAllSelfSendsDesc #defaultString: 'Inline the selected method into all senders of self, removing the method if there are no senders' #catalogID: #browser) #inlineSelfSends #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineMethod #defaultString: 'Inline Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineMethodDesc #defaultString: 'Inline the selected message send into the containing method; replace the original message send with the body of the method that is sent' #catalogID: #browser) #inlineMethod #hasMessageNodeSelectedForRefactoring #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineParameter #defaultString: 'Inline Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineParameterDesc #defaultString: 'Convert the parameter of the method into a temporary defined in the method if all senders have the same argument' #catalogID: #browser) #inlineParameter #hasMethodArgumentSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineSelectedMessage #defaultString: 'Inline Selected Message' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineSelectedMessageDesc #defaultString: 'Inline the selected message into the current method' #catalogID: #browser) #inlineMethod #hasMessageNodeSelectedForRefactoring #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineSelectedParameter #defaultString: 'Inline Selected Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineSelectedParameterDesc #defaultString: 'Inline the selected parameter from all senders' #catalogID: #browser) #inlineParameter #canPerformParameterRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InlineTemporary #defaultString: 'Inline Temporary' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InlineTemporaryDesc #defaultString: 'Change all references to the temporary variable to its definition' #catalogID: #browser) #inlineTemporary #canPerformInlineAssignmentRefactoring #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InspectAllInstances #defaultString: 'Inspect All Instances' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InspectAllInstancesDesc #defaultString: 'Inspect all instances of the selected class' #catalogID: #browser) #inspectAllInstances #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InspectIt #defaultString: 'Inspect It' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InspectItDesc #defaultString: 'Evaluate the selected text and inspect the result' #catalogID: #browser) #inspectIt nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #InspectMethod #defaultString: 'Inspect Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #InspectMethodDesc #defaultString: 'Inspect the selected method' #catalogID: #browser) #inspectMethod #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalBrowseSelectedInstanceVariableReaders #defaultString: 'Local Browse Selected Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing the instance variable within the current scope of the browser' #catalogID: #browser) #browseInstVarReaders #isInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalBrowseSelectedInstanceVariableReferences #defaultString: 'Local Browse Selected Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReferencesDesc #defaultString: 'Browse all methods referencing the instance variable within the current scope of the browser' #catalogID: #browser) #browseInstVarRefs #isInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalBrowseSelectedInstanceVariableWriters #defaultString: 'Local Browse Selected Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying the instance variable within the current scope of the browser' #catalogID: #browser) #browseInstVarWriters #isInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableReaders #defaultString: 'Local Class Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing the class instance variable within the current scope of the browser' #catalogID: #browser) #classInstanceVariableReaders #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableReferences #defaultString: 'Local Class Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableReferencesDesc #defaultString: 'Browse all methods referencing the class instance variable within the current scope of the browser' #catalogID: #browser) #classInstanceVariableReferences #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableWriters #defaultString: 'Local Class Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalClassInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying the class instance variable within the current scope of the browser' #catalogID: #browser) #classInstanceVariableWriters #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalClassReferences #defaultString: 'Local Class References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalClassReferencesDesc #defaultString: 'Browse all methods referencing the selected class within the current scope of the browser' #catalogID: #browser) #classRefs #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalImplementors #defaultString: 'Local Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsDesc #defaultString: 'Browse all implementors of the selected method' #catalogID: #browser) #browseLocalImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #LocalImplementorsActions #defaultString: 'Local Implementors Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ImplementorsActionsDesc #defaultString: 'Actions for Implementors' #catalogID: #browser) #localImplementorsActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReaders #defaultString: 'Local Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing the instance variable within the current scope of the browser' #catalogID: #browser) #instanceVariableReaders #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReferences #defaultString: 'Local Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableReferencesDesc #defaultString: 'Browse all methods referencing the instance variable within the current scope of the browser' #catalogID: #browser) #instanceVariableReferences #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalInstanceVariableWriters #defaultString: 'Local Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying the instance variable within the current scope of the browser' #catalogID: #browser) #instanceVariableWriters #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalSenders #defaultString: 'Local Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SendersDesc #defaultString: 'Browse all senders of the selected method' #catalogID: #browser) #browseLocalSenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #LocalSendersActions #defaultString: 'Local Senders Actions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SendersActionsDesc #defaultString: 'Actions for Senders' #catalogID: #browser) #localSendersActions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #LocalSharedVariableReferences #defaultString: 'Local Shared Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #LocalSharedVariableReferencesDesc #defaultString: 'Browse all references to the variable within the current scope of the browser' #catalogID: #browser) #localSharedVariableReferences #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MethodsWithStringsMatching #defaultString: 'Methods with Strings Matching' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MethodsWithStringsMatchingDesc #defaultString: 'Find all methods which have a literal string matching a string within the current scope of the browser' #catalogID: #browser) #browseStringMatches nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoreBuffers #defaultString: 'More Buffers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoreBuffersDesc #defaultString: 'Select a buffer' #catalogID: #browser) #selectBuffer nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveCategoryToPackage #defaultString: 'Move Category to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveCategoryToPackageDesc #defaultString: 'Move the selected categories to a package' #catalogID: #browser) #moveCategoryToPackage #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveCategoryToParcel #defaultString: 'Move Category to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveCategoryToParcelDesc #defaultString: 'Move all objects in the selected categories to a parcel' #catalogID: #browser) #moveCategoryToParcel #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveCompleteObjectToPackage #defaultString: 'Move Complete Object to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveCompleteObjectToPackageDesc #defaultString: 'Move the complete object (methods and shared variables) to a new package' #catalogID: #browser) #moveCompleteObjectToPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveCompleteObjectToParcel #defaultString: 'Move Complete Object to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveCompleteObjectToParcelDesc #defaultString: 'Move the complete object (methods and shared variables) to a new parcel' #catalogID: #browser) #moveCompleteObjectToParcel #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveMethodToComponent #defaultString: 'Move Method to Component' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveMethodToComponentDesc #defaultString: 'Move the selected method to another object, replacing the selected method with a forwarder' #catalogID: #browser) #moveMethodToOtherObject #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveMethodToPackage #defaultString: 'Move Method to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveMethodToPackageDesc #defaultString: 'Move selected methods to a package' #catalogID: #browser) #moveMethodToPackage #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveMethodToParcel #defaultString: 'Move Method to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveMethodToParcelDesc #defaultString: 'Move the selected methods to a new parcel' #catalogID: #browser) #moveMethodToParcel #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveMethodToProtocol #defaultString: 'Move Method to Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveMethodToProtocolDesc #defaultString: 'Move the selected methods to a new protocol' #catalogID: #browser) #moveMethod #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectDefinitionToPackage #defaultString: 'Move Object Definition to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectDefinitionToPackageDesc #defaultString: 'Move the object definitions to a new package' #catalogID: #browser) #moveObjectDefinitionToPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectDefinitionToParcel #defaultString: 'Move Object Definition to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectDefinitionToParcelDesc #defaultString: 'Move the selected object''s definitions to a new parcel' #catalogID: #browser) #moveObjectDefinitionToParcel #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectToCategory #defaultString: 'Move Object to Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectToCategoryDesc #defaultString: 'Move the selected object to a different category' #catalogID: #browser) #changeClassCategory #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectToNameSpace #defaultString: 'Move Object to Name Space' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectToNameSpaceDesc #defaultString: 'Move the selected objects to another name space' #catalogID: #browser) #moveObjectToNameSpace #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectToPackage #defaultString: 'Move Object to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectToPackageDesc #defaultString: 'Move the selected objects to a package' #catalogID: #browser) #moveObjectToPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveObjectToParcel #defaultString: 'Move Object to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveObjectToParcelDesc #defaultString: 'Move the selected object to a parcel' #catalogID: #browser) #moveObjectToParcel #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveProtocolToPackage #defaultString: 'Move Protocol to Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveProtocolToPackageDesc #defaultString: 'Move the selected protocols to a package' #catalogID: #browser) #moveProtocolToPackage #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveProtocolToParcel #defaultString: 'Move Protocol to Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveProtocolToParcelDesc #defaultString: 'Move the selected protcols to a parcel' #catalogID: #browser) #moveProtocolToParcel #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveSelectedTemporaryToInnermostScope #defaultString: 'Move Selected Temporary to Innermost Scope' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveSelectedTemporaryToInnermostScopeDesc #defaultString: 'Move the variable definition to its innermost scope' #catalogID: #browser) #bindTight #canPerformTemporaryVariableRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #MoveSharedVariableToProtocol #defaultString: 'Move Shared Variable to Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #MoveSharedVariableToProtocolDesc #defaultString: 'Move the selected shared variables to another protocol' #catalogID: #browser) #moveSharedVariableToProtocol #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NameSpaceTemplate #defaultString: 'Name Space Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NameSpaceTemplateDesc #defaultString: 'Display a template for creating a name space' #catalogID: #browser) #showNameSpaceTemplate #canDefineClassesAndNameSpaces #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NavigateToClass #defaultString: 'Navigate to Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NavigateToClassDesc #defaultString: 'Change the selection to the highlighted class' #catalogID: #browser) #navigateToClass #hasClassSelectedAndIncludesClass #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NavigatorRemoveParamter #defaultString: 'Navigator Remove Paramter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NavigatorRemoveParamterDesc #defaultString: 'Remove an argument from the method if all implementors of the method do not use the argument' #catalogID: #browser) #removeParameter #canRemoveParameter #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #NavigatorTypeSpecifications #defaultString: 'Navigator Type Specifications' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NavigatorTypeSpecificationsDesc #defaultString: 'List of navigator types' #catalogID: #browser) #navigatorTypeSpecifications nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewByteIndexedClass #defaultString: 'New Byte Indexed Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewByteIndexedClassDesc #defaultString: 'Create a byte indexed class.' #catalogID: #browser) #newByteIndexedClass #isCategoryParcelOrPackageSelected #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdNewClass #defaultString: 'New Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdNewClassDesc #defaultString: 'Create a new class' #catalogID: #browser) #newClass nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewClassTemplate #defaultString: 'New Class Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewClassTemplateDesc #defaultString: 'Display a template for defining a new class' #catalogID: #browser) #showClassTemplate #canDefineClassesAndNameSpaces #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewIndexedClass #defaultString: 'New Indexed Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewIndexedClassDesc #defaultString: 'Create a new indexed class.' #catalogID: #browser) #newIndexedClass #isCategoryParcelOrPackageSelected #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewNameSpace #defaultString: 'New Name Space' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewNameSpaceDesc #defaultString: 'Create a new name space.' #catalogID: #browser) #newNameSpace #isCategoryParcelOrPackageSelected #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #NewSharedVariable #defaultString: 'New Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #NewSharedVariableDesc #defaultString: 'Create a new shared variable' #catalogID: #browser) #newSharedVariable #isCategoryParcelOrPackageSelected #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #OpenBrowserOnClass #defaultString: 'Open Browser on Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #OpenBrowserOnClassDesc #defaultString: 'Browse only the selected class' #catalogID: #browser) #openBrowserForClass #hasClassSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #OpenParcelProperties #defaultString: 'Open Parcel Properties' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #OpenParcelPropertiesDesc #defaultString: 'Open a parcel properties window on the selected parcel' #catalogID: #browser) #openParcelProperties #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelAddChanges #defaultString: 'Parcel Add Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelAddChangesDesc #defaultString: 'Add the items from the current change set to the selected parcel' #catalogID: #browser) #parcelAddChanges #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelAddFilein #defaultString: 'Parcel Add File-in' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelAddFileinDesc #defaultString: 'Load Smalltalk source, compiling it into the selected parcel' #catalogID: #browser) #parcelFileIn #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelAddToChanges #defaultString: 'Parcel Add to Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelAddToChangesDesc #defaultString: 'Add the contents of the selected parcels to the change set' #catalogID: #browser) #parcelAddToChanges #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseChangedMethods #defaultString: 'Parcel Browse Changed Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseChangedMethodsDesc #defaultString: 'Browse all methods in the parcel that have changed since the parcel was saved' #catalogID: #browser) #browseChangedMethods #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseExclusiveMethodImports #defaultString: 'Parcel Browse Exclusive Method Imports' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseExclusiveMethodImportsDesc #defaultString: 'Browse all methods not defined in this parcel, but are only used within it' #catalogID: #browser) #browseExclusiveMethodImports #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseExtensionMethods #defaultString: 'Parcel Browse Extension Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseExtensionMethodsDesc #defaultString: 'Browse extension methods in the parcel' #catalogID: #browser) #browseExtensionMethods #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseExtensionsOfDefinedClasses #defaultString: 'Parcel Browse Extensions of Defined Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseExtensionsOfDefinedClassesDesc #defaultString: 'Browse extensions of the parcel''s defined classes' #catalogID: #browser) #browseExtensionsOfDefinedClasses #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseReferencesToDefinedClasses #defaultString: 'Parcel Browse References to Defined Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseReferencesToDefinedClassesDesc #defaultString: 'Browse references to all classes defined in this parcel' #catalogID: #browser) #browseReferencesToDefinedClasses #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseSubclassesOfDefinedClasses #defaultString: 'Parcel Browse Subclasses of Defined Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseSubclassesOfDefinedClassesDesc #defaultString: 'Browse all subclasses in other parcels of this parcel''s defined classes' #catalogID: #browser) #browseSubclassesOfDefinedClasses #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelBrowseUnparceledMethodsOnDefinedClasses #defaultString: 'Parcel Browse Unparceled Methods on Defined Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelBrowseUnparceledMethodsOnDefinedClassesDesc #defaultString: 'Browse all unparceled methods whose class is defined in the parcel' #catalogID: #browser) #browseUnparceledMethodsOnDefinedClasses #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelCreate #defaultString: 'Parcel Create' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelCreateDesc #defaultString: 'Create a new parcel' #catalogID: #browser) #parcelCreateParcel nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelDiscard #defaultString: 'Parcel Discard' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelDiscardDesc #defaultString: 'Delete the parcel without unloading its source' #catalogID: #browser) #parcelDiscardParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelEmpty #defaultString: 'Parcel Empty' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelEmptyDesc #defaultString: 'Empty the selected parcel without removing its source from the image' #catalogID: #browser) #parcelEmptyParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelFileout #defaultString: 'Parcel File-out' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelFileoutDesc #defaultString: 'Save the selected parcel as a Smalltalk source file-out' #catalogID: #browser) #parcelFileoutParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelLoad #defaultString: 'Parcel Load' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelLoadDesc #defaultString: 'Load a parcel' #catalogID: #browser) #parcelLoadParcel nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelMakeRemoveScript #defaultString: 'Parcel Make Remove Script' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelMakeRemoveScriptDesc #defaultString: 'Create a script to remove the parcel' #catalogID: #browser) #parcelCreateRemoveScript #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelOverrideMethod #defaultString: 'Parcel Override Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelOverrideMethodDesc #defaultString: 'Create overrides for the selected methods and shared variables' #catalogID: #browser) #overrideDefinitionsInParcel #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelOverrideObject #defaultString: 'Parcel Override Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelOverrideObjectDesc #defaultString: 'Create overrides of the selected objects.' #catalogID: #browser) #overrideObjectInParcel #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelRemove #defaultString: 'Parcel Remove' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelRemoveDesc #defaultString: 'Unload and remove the parcel' #catalogID: #browser) #parcelRemoveParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelRemoveChanges #defaultString: 'Parcel Remove Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelRemoveChangesDesc #defaultString: 'Remove the items in the change set contained in the selected parcel' #catalogID: #browser) #parcelRemoveChanges #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelRemoveFromChanges #defaultString: 'Parcel Remove from Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelRemoveFromChangesDesc #defaultString: 'Remove the selected parcel''s contents from the change set' #catalogID: #browser) #parcelRemoveFromChanges #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelRename #defaultString: 'Parcel Rename' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelRenameDesc #defaultString: 'Rename the selected parcel' #catalogID: #browser) #parcelRenameParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelSave #defaultString: 'Parcel Save' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelSaveDesc #defaultString: 'Save the selected parcel' #catalogID: #browser) #parcelSaveParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ParcelUnload #defaultString: 'Parcel Unload' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ParcelUnloadDesc #defaultString: 'Unload the selected parcel' #catalogID: #browser) #parcelUnloadParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PasteSelection #defaultString: 'Paste Selection' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Paste #defaultString: 'Paste' #catalogID: #browser) #paste #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PrintIt #defaultString: 'Print It' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PrintItDesc #defaultString: 'Evaluate the selected text and print the result' #catalogID: #browser) #printIt nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ProtectClassInstanceVariable #defaultString: 'Protect Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ProtectClassInstanceVariableDesc #defaultString: 'Convert from indirect to direct class instance variable access, removing all accessing methods that are no longer used' #catalogID: #browser) #protectClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ProtectInstanceVariable #defaultString: 'Protect Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ProtectInstanceVariableDesc #defaultString: 'Convert from indirect to direct instance variable access, removing all accessing methods that are no longer used' #catalogID: #browser) #protectInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ProtectSelectedInstanceVariable #defaultString: 'Protect Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ProtectSelectedInstanceVariableDesc #defaultString: 'Convert abstract variable references to direct references for the selected instance variable' #catalogID: #browser) #protectInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushDownClassInstanceVariable #defaultString: 'Push Down Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushDownClassInstanceVariableDesc #defaultString: 'Move the class instance variable''s definition to the subclasses that reference it' #catalogID: #browser) #pushDownClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushDownInstanceVariable #defaultString: 'Push Down Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushDownInstanceVariableDesc #defaultString: 'Move the instance variable''s definition to the subclasses that reference it' #catalogID: #browser) #pushDownInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushDownMethod #defaultString: 'Push Down Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushDownMethodDesc #defaultString: 'Move the selected method to the selected class'' subclasses' #catalogID: #browser) #pushDownSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushDownSelectedInstanceVariable #defaultString: 'Push Down Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushDownSelectedInstanceVariableDesc #defaultString: 'Move the selected instance variable definition to all subclasses' #catalogID: #browser) #pushDownInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushUpClassInstanceVariable #defaultString: 'Push Up Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushUpClassInstanceVariableDesc #defaultString: 'Move the class instance variable definition to the selected class'' superclass' #catalogID: #browser) #pushUpClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushUpInstanceVariable #defaultString: 'Push Up Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushUpInstanceVariableDesc #defaultString: 'Move the instance variable definition to the selected class'' superclass' #catalogID: #browser) #pushUpInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushUpMethod #defaultString: 'Push Up Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushUpMethodDesc #defaultString: 'Move the selected method to the selected class'' superclass' #catalogID: #browser) #pushUpSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #PushUpSelectedInstanceVariable #defaultString: 'Push Up Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #PushUpSelectedInstanceVariableDesc #defaultString: 'Move the selected instance variable to the superclass' #catalogID: #browser) #pushUpInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #Redo #defaultString: 'Redo' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RedoDesc #defaultString: 'Redo the last undo operation' #catalogID: #browser) #redoOperation #hasRedoableOperations #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RefactoringBrowserHelp #defaultString: 'Refactoring Browser Help' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Help #defaultString: 'Help' #catalogID: #browser) #help nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ReferencesToClassOrGlobal #defaultString: 'References to Class or Global' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReferencesToClassOrGlobalDesc #defaultString: 'Find references to a class or shared variable within the current scope of the browser' #catalogID: #browser) #browseGlobals nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ReferencesToSymbol #defaultString: 'References to Symbol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReferencesToSymbolDesc #defaultString: 'Find references to a symbol within the current scope of the browser' #catalogID: #browser) #browseSymbols nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ReinitializeBindings #defaultString: 'Reinitialize Bindings' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReinitializeBindingsDesc #defaultString: 'Reinitialize all selected bindings' #catalogID: #browser) #initializeBindings #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveActionSpecification #defaultString: 'Remove Action Specification' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveActionSpecificationDesc #defaultString: 'Remove an action specification' #catalogID: #browser) #removeAction #hasActionSpecificationSelected #yourself)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveBuffer #defaultString: 'Remove Buffer' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveBufferDesc #defaultString: 'Remove the current buffer' #catalogID: #browser) #removeBuffer #hasMultipleCodeTools #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveCategory #defaultString: 'Remove Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveCategoryDesc #defaultString: 'Remove all selected categories and their classes' #catalogID: #browser) #removeCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveClassInstanceVariable #defaultString: 'Remove Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveClassInstanceVariableDesc #defaultString: 'Remove a class instance variable if it is not referenced' #catalogID: #browser) #removeClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveInstanceVariable #defaultString: 'Remove Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveInstanceVariableDesc #defaultString: 'Remove an instance variable if it is not referenced' #catalogID: #browser) #removeInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveMethod #defaultString: 'Remove Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveMethodDesc #defaultString: 'Remove the selected methods' #catalogID: #browser) #removeMethod #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveMethodFromList #defaultString: 'Remove Method From List' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveMethodFromListDesc #defaultString: 'Removes the selected methods and shared variables from the list of items.' #catalogID: #browser) #removeFromList #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveObject #defaultString: 'Remove Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveObjectDesc #defaultString: 'Remove the selected shared variables, name spaces, or classes, including their subclasses' #catalogID: #browser) #removeObject #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveOverrideMethod #defaultString: 'Remove Override Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveOverrideMethodDesc #defaultString: 'Remove a method override' #catalogID: #browser) #removeMethodOrStaticOverride #isMethodOverridden #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveOverrideObject #defaultString: 'Remove Override Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveOverrideObjectDesc #defaultString: 'Remove an object override from the system' #catalogID: #browser) #removeObjectOverride #isClassOverridden #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveParameter #defaultString: 'Remove Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveParameterDesc #defaultString: 'Remove the selected argument from the method if all implementors of the method do not use the argument' #catalogID: #browser) #removeParameter #hasMethodArgumentSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveProtocol #defaultString: 'Remove Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveProtocolDesc #defaultString: 'Remove the selected protocol and all of its methods' #catalogID: #browser) #removeProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveSelectedInstanceVariable #defaultString: 'Remove Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveSelectedInstanceVariableDesc #defaultString: 'Remove the selected instance variable if there are no references to it' #catalogID: #browser) #removeInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveSelectedParameter #defaultString: 'Remove Selected Parameter' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveSelectedParameterDesc #defaultString: 'Remove the selected parameter from the method (if it is unused), modifying all callers' #catalogID: #browser) #removeParameter #canPerformParameterRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveSharedVariable #defaultString: 'Remove Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveSharedVariableDesc #defaultString: 'Remove the selected variables whether or not there are references to them' #catalogID: #browser) #removeSharedVariable #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RemoveStatic #defaultString: 'Remove Static' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RemoveStaticDesc #defaultString: 'Remove the selected shared variable' #catalogID: #browser) #removeStatic #hasStaticSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameCategory #defaultString: 'Rename Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameCategoryDesc #defaultString: 'Rename the selected category' #catalogID: #browser) #renameCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameClassInstanceVariable #defaultString: 'Rename Class Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameClassInstanceVariableDesc #defaultString: 'Rename a class instance variable and all its references' #catalogID: #browser) #renameClassInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameInstanceVariable #defaultString: 'Rename Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameInstanceVariableDesc #defaultString: 'Rename an instance variable and all its references' #catalogID: #browser) #renameInstanceVariable #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameMethod #defaultString: 'Rename Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameMethodDesc #defaultString: 'Rename a method and all of its senders' #catalogID: #browser) #renameMethod #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameObject #defaultString: 'Rename Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameObjectDesc #defaultString: 'Rename a class, name space, or shared variable and all references to it' #catalogID: #browser) #renameObject #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameProtocol #defaultString: 'Rename Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameProtocolDesc #defaultString: 'Rename the selected protocol' #catalogID: #browser) #renameProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameSelectedInstanceVariable #defaultString: 'Rename Selected Instance Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameSelectedInstanceVariableDesc #defaultString: 'Rename the selected instance variable' #catalogID: #browser) #renameInstanceVariable #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameSelectedTemporaryVariable #defaultString: 'Rename Selected Temporary Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameTemporaryVariableDesc #defaultString: 'Rename the selected temporary variable and all references to it' #catalogID: #browser) #renameTemporary #canPerformTemporaryVariableRefactorings #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameSharedVariable #defaultString: 'Rename Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameSharedVariableDesc #defaultString: 'Rename the selected shared variable and all references to it' #catalogID: #browser) #renameSharedVariable #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RenameTemporaryVariable #defaultString: 'Rename Temporary Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RenameTemporaryVariableDesc #defaultString: 'Rename the selected temporary variable and all references to it' #catalogID: #browser) #renameTemporary #hasTemporarySelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ReplaceText #defaultString: 'Replace Text' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ReplaceTextDesc #defaultString: 'Search and replace text' #catalogID: #browser) #replace #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RestoreOverrideMethod #defaultString: 'Restore Override Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RestoreOverrideMethodDesc #defaultString: 'Restore an overridden method' #catalogID: #browser) #restoreMethodOrStaticOverride #isMethodOverridden #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RestoreOverrideObject #defaultString: 'Restore Override Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RestoreOverrideObjectDesc #defaultString: 'Restore an object override from the system' #catalogID: #browser) #restoreObjectOverride #isClassOverridden #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RestoreSelectedOverride #defaultString: 'Restore Selected Override' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RestoreSelectedOverrideDesc #defaultString: 'Restores the selected override.' #catalogID: #browser) #restoreOverride #isOverrideSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RewriterReplace #defaultString: 'Rewriter Replace' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RewriterReplaceDesc #defaultString: 'Replace using parse trees.' #catalogID: #browser) #replace nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #RewriterSearch #defaultString: 'Rewriter Search' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #RewriterSearchDesc #defaultString: 'Search for a matching parse tree.' #catalogID: #browser) #find nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SafeRemoveMethod #defaultString: 'Safe Remove Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SafeRemoveMethodDesc #defaultString: 'Remove the selected methods if there are no references to them' #catalogID: #browser) #removeMethodSafe #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SafeRemoveObject #defaultString: 'Safe Remove Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SafeRemoveObjectDesc #defaultString: 'Remove the selected classes only if there are no references to them' #catalogID: #browser) #removeObjectsSafe #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SafeRemoveSharedVariable #defaultString: 'Safe Remove Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SafeRemoveSharedVariableDesc #defaultString: 'Remove the selected variables if there are no references to them' #catalogID: #browser) #removeSharedVariableSafe #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedGlobalInstanceVariableReaders #defaultString: 'Selected Global Instance Variable Readers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedInstanceVariableReadersDesc #defaultString: 'Browse all methods accessing the selected instance variable' #catalogID: #browser) #browseInstVarReaders #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedGlobalInstanceVariableReferences #defaultString: 'Selected Global Instance Variable References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedInstanceVariableReferencesDesc #defaultString: 'Browse all methods referring to the selected instance variable' #catalogID: #browser) #browseInstVarRefs #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedGlobalInstanceVariableWriters #defaultString: 'Selected Global Instance Variable Writers' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedInstanceVariableWritersDesc #defaultString: 'Browse all methods modifying the selected instance variable' #catalogID: #browser) #browseInstVarWriters #hasInstanceVariableSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedMessageGlobalImplementors #defaultString: 'Selected Message Global Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedMessageImplementorsDesc #defaultString: 'Browse all implementors of the selected message' #catalogID: #browser) #browseImplementors #hasMessageSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedMessageGlobalSenders #defaultString: 'Selected Message Global Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedMessageSendersDesc #defaultString: 'Browse all senders of the selected message' #catalogID: #browser) #browseSenders #hasMessageSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedMessageImplementors #defaultString: 'Selected Message Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedMessageImplementorsDesc #defaultString: 'Browse all implementors of the selected message' #catalogID: #browser) #browseImplementors #hasMessageNodeSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SelectedMessageReferences #defaultString: 'Selected Message References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SelectedMessageSendersDesc #defaultString: 'Browse all senders of the selected message' #catalogID: #browser) #browseSenders #hasMessageNodeSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SetDefaultNameSpace #defaultString: 'Set Default Name Space' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SetDefaultNameSpaceDesc #defaultString: 'Set the default name space to be displayed when a browser is opened' #catalogID: #browser) #setDefaultNameSpace nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SetUndoCount #defaultString: 'Set Undo Count' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SetUndoCountDesc #defaultString: 'Set the size of the undo buffer' #catalogID: #browser) #setUndoCount nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SharedVariableTemplate #defaultString: 'Shared Variable Template' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SharedVariableTemplateDesc #defaultString: 'Display a template for creating a shared variable' #catalogID: #browser) #showSharedVariableTemplate nil #activeTool)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #ShowOnlyFiltered #defaultString: 'Show Only Filtered' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ShowOnlyFilteredDesc #defaultString: 'Show only methods and shared variables within the selected Parcels/Packages' #catalogID: #browser) #showOnlyFilteredSpecifications nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ShowOverrideDiffs #defaultString: 'Show Override Diffs' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ShowOverrideDiffsDesc #defaultString: 'Show source differences between the override and the image' #catalogID: #browser) #showOverrideDiff #isOverrideSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintClearFilters #defaultString: 'Smalllint Clear Filters' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintClearFiltersDesc #defaultString: 'Clear Smalllint filter list.' #catalogID: #browser) #clearFilters nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintFilterClass #defaultString: 'Smalllint Filter Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintFilterClassDesc #defaultString: 'Add the selected class to the Smalllint rules ignore list' #catalogID: #browser) #addFilterForClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintFilterSelector #defaultString: 'Smalllint Filter Selector' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintFilterSelectorDesc #defaultString: 'Add the selected methods to the Smalllint rules ignore list' #catalogID: #browser) #addFilterForSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintLoadFilters #defaultString: 'Smalllint Load Filters' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintLoadFiltersDesc #defaultString: 'Load Smalllint filters from a file.' #catalogID: #browser) #loadFilters nil #activeTool)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #SmalllintRuleTypeList #defaultString: 'Smalllint Rule Type List' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintRuleTypeListDesc #defaultString: '' #catalogID: #browser) #ruleActions nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SmalllintSaveFilters #defaultString: 'Smalllint Save Filters' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SmalllintSaveFiltersDesc #defaultString: 'Save Smalllint''s filters to a file.' #catalogID: #browser) #saveFilters nil #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnBrowser #defaultString: 'Spawn Browser' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnBrowserDesc #defaultString: 'Open a new browser' #catalogID: #browser) #spawnBrowser nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnCategory #defaultString: 'Spawn Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnCategoryDesc #defaultString: 'Browse only the classes in the selected categories' #catalogID: #browser) #spawnCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnClass #defaultString: 'Spawn Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnClassDesc #defaultString: 'Browse only the selected classes' #catalogID: #browser) #spawnClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnClassHierarchy #defaultString: 'Spawn Class Hierarchy' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnClassHierarchyDesc #defaultString: 'Browse only the selected class and its hierarchy' #catalogID: #browser) #spawnHierarchy #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnMethod #defaultString: 'Spawn Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnMethodDesc #defaultString: 'Browse only the selected methods' #catalogID: #browser) #spawnMethod #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnParcel #defaultString: 'Spawn Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnParcelDesc #defaultString: 'Browse the selected parcels' #catalogID: #browser) #spawnParcel #isParcelSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnProtocol #defaultString: 'Spawn Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnProtocolDesc #defaultString: 'Browse the selected protocols' #catalogID: #browser) #spawnProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #SpawnPundle #defaultString: 'Spawn Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #SpawnPundleDesc #defaultString: 'Browse the selected pundles' #catalogID: #browser) #spawnPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StaticReferences #defaultString: 'Static References' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StaticReferencesDesc #defaultString: 'Browse all references to the selected shared variable' #catalogID: #browser) #staticReferences #hasStaticSelected #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdStoreAddBundle #defaultString: 'Store Add Bundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdStoreAddBundleDesc #defaultString: 'Create a new bundle' #catalogID: #browser) #storeCreateBundle nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #CmdStoreAddPackage #defaultString: 'Store Add Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #CmdStoreAddPackageDesc #defaultString: 'Create a new package' #catalogID: #browser) #storeCreatePackage nil #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #StoreAllDatabasesBrowseChanges #defaultString: 'Store All Databases Browse Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreAllDatabasesBrowseChangesDesc #defaultString: '' #catalogID: #browser) #storeAllDbsBrowseChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #StoreAllDatabasesChangeList #defaultString: 'Store All Databases Change List' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreAllDatabasesChangeListDesc #defaultString: '' #catalogID: #browser) #storeAllDbsChangeListOnChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #StoreAllDatabasesFileoutChanges #defaultString: 'Store All Databases Fileout Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreAllDatabasesFileoutChangesDesc #defaultString: '' #catalogID: #browser) #storeAllDbsFileoutChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #StoreAllDatabasesInspectChanges #defaultString: 'Store All Databases Inspect Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreAllDatabasesInspectChangesDesc #defaultString: '' #catalogID: #browser) #storeAllDbsInspectChangeSet #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseClassVersions #defaultString: 'Store Browse Class Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseClassVersionsDesc #defaultString: 'Browse all versions of the selected class in the repository' #catalogID: #browser) #storeBrowseClassVersions #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseMethodChanges #defaultString: 'Store Browse Method Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseMethodChangesDesc #defaultString: 'Browse the methods in the repository that have been changed' #catalogID: #browser) #storeBrowseChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseMethodVersions #defaultString: 'Store Browse Method Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseMethodVersionsDesc #defaultString: 'Browse the methods that have been changed' #catalogID: #browser) #storeBrowseMethodVersions #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowsePundleVersions #defaultString: 'Store Browse Pundle Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowsePundleVersionsDesc #defaultString: 'Browse all versions of the selected method in the repository' #catalogID: #browser) #storeBrowsePundleVersions #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseRemovedMethods #defaultString: 'Store Browse Removed Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseRemovedMethodsDesc #defaultString: 'Browse all methods stored in the repository for this class that are not loaded' #catalogID: #browser) #storeBrowseRemovedMethods #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreBrowseSharedVariableVersions #defaultString: 'Store Browse Shared Variable Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreBrowseSharedVariableVersionsDesc #defaultString: 'Browse all versions of the shared variable stored in the repository' #catalogID: #browser) #storeBrowseSharedVariableVersions #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreChangeListOnChanges #defaultString: 'Store Change List on Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreChangeListOnChangesDesc #defaultString: 'Open a change list for the selected package' #catalogID: #browser) #storeChangeListOnChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreCompareClassVersion #defaultString: 'Store Compare Class Version' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreCompareClassVersionDesc #defaultString: 'Browse differences between the loaded class and a version in the repository' #catalogID: #browser) #storeCompareWithVersion #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreCompareMethodVersions #defaultString: 'Store Compare Method Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreCompareMethodVersionsDesc #defaultString: 'Browse differences between the selected method and another version of it' #catalogID: #browser) #storeCompareMethodWithVersion #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreComparePundleVersions #defaultString: 'Store Compare Pundle Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreComparePundleVersionsDesc #defaultString: 'Browse differences between the selected item and an item in the repository' #catalogID: #browser) #storeComparePundleVersion #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreComparePundleWithParent #defaultString: 'Store Compare Pundle with Parent' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreComparePundleWithParentDesc #defaultString: 'Browse differences between the selected item and its parent' #catalogID: #browser) #storeCompareWithParent #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreCompareSharedVariableVersions #defaultString: 'Store Compare Shared Variable Versions' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreCompareSharedVariableVersionsDesc #defaultString: 'Browse differences between the selected shared variable and another version of it' #catalogID: #browser) #storeCompareSharedVariableWithVersion #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreEditBundle #defaultString: 'Store Edit Bundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreEditBundleDesc #defaultString: 'Edit the bundle''s specification' #catalogID: #browser) #storeEditBundleSpecification #isBundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreExtendClassInPackage #defaultString: 'Store Extend Class in Package' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreExtendClassInPackageDesc #defaultString: 'Create an extension of a class or name space in a new package.' #catalogID: #browser) #extendClassInPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreFilein #defaultString: 'Store File-in' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreFileinDesc #defaultString: 'Load Smalltalk source, compiling it into the selected package' #catalogID: #browser) #storeFileinPackage #isPackageSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreFileoutPundle #defaultString: 'Store File-out Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreFileoutPundleDesc #defaultString: 'Save the Smalltalk source of the selected item as a file-out' #catalogID: #browser) #storeFileoutPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreFileoutPundleChanges #defaultString: 'Store File-out Pundle Changes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreFileoutPundleChangesDesc #defaultString: 'Save the Smalltalk source for the changes in the selected item' #catalogID: #browser) #storeFileoutPundleChanges #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreFileoutPundleDifferences #defaultString: 'Store File-out Pundle Differences' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreFileoutPundleDifferencesDesc #defaultString: 'Save the Smalltalk source for the differences between selected item versions' #catalogID: #browser) #storeFileoutPundleDifferences #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreInspectChangeSet #defaultString: 'Store Inspect Change Set' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreInspectChangeSetDesc #defaultString: 'Inspect the change set of the selected packages' #catalogID: #browser) #storeInspectChangeSet #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreLoadAnotherPundle #defaultString: 'Store Load Another Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreLoadAnotherPundleDesc #defaultString: 'Load a package or bundle from the repository' #catalogID: #browser) #loadAnotherPundle nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreLoadPundle #defaultString: 'Store Load Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreLoadPundleDesc #defaultString: 'Load another version of the selected item' #catalogID: #browser) #storeLoadPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreMakeCurrent #defaultString: 'Store Make Current' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreMakeCurrentDesc #defaultString: 'Make the selected package the default package for new source' #catalogID: #browser) #storeMakeCurrent #isPackageSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreNewClassExtension #defaultString: 'Store New Class Extension' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreNewClassExtensionDesc #defaultString: 'Create a new class extension in the selected package' #catalogID: #browser) #storeNewClassExtension #isPackageSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreOverrideMethod #defaultString: 'Store Override Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreOverrideMethodDesc #defaultString: 'Create an override for the selected method(s) or shared variable(s)' #catalogID: #browser) #overrideDefinitionsInPackage #isDefinitionSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreOverrideObject #defaultString: 'Store Override Object' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreOverrideObjectDesc #defaultString: 'Create an override for the selected object(s)' #catalogID: #browser) #overrideObjectInPackage #isBindingSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StorePublish #defaultString: 'Store Publish' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StorePublishDesc #defaultString: 'Publish the selected item to the repository' #catalogID: #browser) #storePublishPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StorePublishParcel #defaultString: 'Store Publish Parcel' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StorePublishParcelDesc #defaultString: 'Publish the selected item as a parcel' #catalogID: #browser) #storePublishAsParcel #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StorePundleProperties #defaultString: 'Store Pundle Properties' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StorePundlePropertiesDesc #defaultString: 'Open the selected component''s properties dialog' #catalogID: #browser) #storePundleProperties #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreReconcilePundle #defaultString: 'Store Reconcile Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreReconcilePundleDesc #defaultString: 'Reconcile the selected package with the database' #catalogID: #browser) #storeReconcilePundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreRenamePundle #defaultString: 'Store Rename Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreRenamePundleDesc #defaultString: 'Rename the selected item' #catalogID: #browser) #storeRenamePundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreRevertMethod #defaultString: 'Store Revert Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreRevertMethodDesc #defaultString: 'Load the version of the method stored in the repository for this package version' #catalogID: #browser) #storeRevertMethod #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreRevertSharedVariable #defaultString: 'Store Revert Shared Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreRevertSharedVariableDesc #defaultString: 'Load the version of the shared variable stored in the repository for this package version' #catalogID: #browser) #storeRevertSharedVariable #isSharedVariableSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #StoreUnloadPundle #defaultString: 'Store Unload Pundle' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #StoreUnloadPundleDesc #defaultString: 'Unload the selected item' #catalogID: #browser) #storeUnloadPundle #isPundleSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ToggleStatusBar #defaultString: 'Toggle Status Bar' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ToggleStatusBarDesc #defaultString: 'Toggle the status bars of all browsers' #catalogID: #browser) #toggleStatusBar nil #codeModel)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #ToggleToolbar #defaultString: 'Toggle Toolbar' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ToggleToolbarDesc #defaultString: 'Toggle the toolbar on all browsers' #catalogID: #browser) #toggleToolbar nil #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllCategories #defaultString: 'Uncheck All Categories' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllCategoriesDesc #defaultString: 'Remove all categories matching an expression from the item list' #catalogID: #browser) #uncheckAllCategories nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllClasses #defaultString: 'Uncheck All Classes' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllClassesDesc #defaultString: 'Remove all classes matching a pattern from the item list' #catalogID: #browser) #uncheckAllClasses #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllImplementors #defaultString: 'Uncheck All Implementors' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllImplementorsDesc #defaultString: 'Remove all implementors of the selected method from the item list' #catalogID: #browser) #uncheckImplementors #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllMethods #defaultString: 'Uncheck All Methods' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllMethodsDesc #defaultString: 'Remove all methods matching a pattern from the item list' #catalogID: #browser) #uncheckAllSelectors #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllProtocols #defaultString: 'Uncheck All Protocols' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllProtocolsDesc #defaultString: 'Remove all protocols matching a pattern from the item list' #catalogID: #browser) #uncheckAllProtocols #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllSenders #defaultString: 'Uncheck All Senders' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllSendersDesc #defaultString: 'Remove all senders of the selected method from the item list' #catalogID: #browser) #uncheckSenders #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllSubclasses #defaultString: 'Uncheck All Subclasses' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllSubclassesDesc #defaultString: 'Remove all the class'' subclasses from the item list' #catalogID: #browser) #uncheckSubclasses #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckAllSuperclasses #defaultString: 'Uncheck All Superclasses' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckAllSuperclassesDesc #defaultString: 'Remove all the class'' superclasses from the item list' #catalogID: #browser) #uncheckSuperclasses #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckCategory #defaultString: 'Uncheck Category' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckCategoryDesc #defaultString: 'Remove the selected categories from the item list' #catalogID: #browser) #uncheckCategory #isCategorySelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckClass #defaultString: 'Uncheck Class' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckClassDesc #defaultString: 'Remove the selected class from the item list' #catalogID: #browser) #uncheckClass #isClassSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckMethod #defaultString: 'Uncheck Method' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckMethodDesc #defaultString: 'Remove the selected methods from the item list' #catalogID: #browser) #uncheckSelector #isSelectorSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UncheckProtocol #defaultString: 'Uncheck Protocol' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UncheckProtocolDesc #defaultString: 'Remove the selected protocols from the item list' #catalogID: #browser) #uncheckProtocol #isProtocolSelected #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #Undo #defaultString: 'Undo' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UndoDesc #defaultString: 'Undo the last action' #catalogID: #browser) #undoOperation #hasUndoableOperations #browser)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UndoTyping #defaultString: 'Undo Typing' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #Undo #defaultString: 'Undo' #catalogID: #browser) #undo #isTextTool #activeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UpdateCodeToolDisplay #defaultString: 'Update Code Tool Display' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UpdateCodeToolDisplayDesc #defaultString: 'Update the display' #catalogID: #browser) #updateDisplay nil #codeTool)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #UpdateNavigator #defaultString: 'Update Navigator' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #UpdateNavigatorDesc #defaultString: 'Refresh the navigator from the current image' #catalogID: #browser) #updateNavigator nil #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #VariableNavigatorPullUpVariable #defaultString: 'Variable Navigator Pull Up Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #VariableNavigatorPullUpVariableDesc #defaultString: 'Move the selected variable into the superclass' #catalogID: #browser) #pullUpSelectedInstanceVariable #canPerformPullUpVariable #navigator)	#(#{Refactory.Browser.RBCommand} #(#{Kernel.UserMessage} #key: #VariableNavigatorRemoveVariable #defaultString: 'Variable Navigator Remove Variable' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #VariableNavigatorRemoveVariableDesc #defaultString: 'Remove the selected variable if there are no references to it' #catalogID: #browser) #removeSelectedInstanceVariable #canPerformRemoveVariable #navigator)	#(#{Refactory.Browser.RBDynamicMultiCommand} #(#{Kernel.UserMessage} #key: #ZoomSpecifications #defaultString: 'Zoom Specifications' #catalogID: #browser) #(#{Kernel.UserMessage} #key: #ZoomSpecificationsDesc #defaultString: 'The Zoom menu for the RB.' #catalogID: #browser) #zoomMenuSpecifications nil #browser))</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>temporary variables</category><body package="Experiment" selector="useAssertDescription">useAssertDescription	| dialog node refactoring |	(AddAssertRefactoring validate: (node:= self findNode))		ifFalse: [ ^ self ].	refactoring := AddAssertRefactoring new		from: node sourceInterval;		class: self methodClass;		selector: self selector;		yourself.	dialog := AddAssertRefactorDialog new.	dialog nodeName: refactoring extractVarName.	dialog openDialog.	dialog hasList ifFalse: [ ^ self ].	refactoring assertList: dialog strategies.	self performRefactoring: refactoring.</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient</class-id> <category>actions</category><body package="Experiment" selector="useAssertDescription">useAssertDescription	self changeRequest		ifFalse:			[^Dialog warn: (#CannotPerformOperationSrcChanged &lt;&lt; #pdp &gt;&gt; 'The operation cannot be performed because the source code has changed.')].	self performDebugOperation: #addAssertDescription.</body></methods><methods><class-id>Core.Object</class-id> <category>testing</category><body package="Experiment" selector="assert:description:">assert: aBlock description: aStringOrBlock	"Throw an assertion error if aBlock does not evaluates to true."	aBlock value 		ifFalse: [ self error: aStringOrBlock value ]</body></methods><methods><class-id>CraftedSmalltalk.DebuggerService</class-id> <category>actions</category><body package="Experiment" selector="addAssertDescription">addAssertDescription	self performDebugRequest: #basicAddAssertDescription.</body><body package="Experiment" selector="basicAddAssertDescription">basicAddAssertDescription	| met node refactoring sel newMethod dialog slot nodeValue |	"currentContext inspect."	met := self selectedMethod.	sel := met selector.	(AddAssertRefactoring validate: (	node := dependents findNode))		ifFalse: [ ^ self ].	slot := currentContext slotAccessors 		detect: [:assoc | assoc key = node name ]		ifNone: [ nil ].	nodeValue := nil.	slot ifNotNil: [ nodeValue := currentContext slotAt: slot value ].		refactoring := AddAssertRefactoring new		from: node sourceInterval;		class: met mclass;		selector: self selector;		yourself.	dialog := AddAssertRefactorDialog new		nodeValue: nodeValue;		nodeName: refactoring extractVarName;		stackList: self contextList;		openDialog.	dialog hasList ifFalse: [ ^ self ].	refactoring assertList: dialog strategies.	refactoring execute.	newMethod := met mclass compiledMethodAt: sel.	self methodChanged: newMethod selector: sel</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser class</class-id> <category>resources</category><body package="Experiment" selector="toolbarMenu">toolbarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolbarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #CreateBuffer 					#defaultString: 'Create Buffer' 					#catalogID: #browser ) 				#nameKey: #'Create Buffer' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #rbNewBuffer ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindClassVariableNameSpace 					#defaultString: 'Find Class/Variable/Name Space' 					#catalogID: #browser ) 				#nameKey: #'Find Global Name' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ClassReferences 					#defaultString: 'Class References' 					#catalogID: #browser ) 				#nameKey: #'Global Class References' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #classReferences ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #createClass 					#defaultString: 'Create Class' 					#catalogID: #browser ) 				#nameKey: #'New Class' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #newClass ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Undo 					#defaultString: 'Undo' 					#catalogID: #browser ) 				#nameKey: #Undo 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #undo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Redo 					#defaultString: 'Redo' 					#catalogID: #browser ) 				#nameKey: #Redo 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #redo ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cut 					#defaultString: 'Cut' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #cut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Copy 					#defaultString: 'Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #copy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Paste 					#defaultString: 'Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #FindMethod 					#defaultString: 'Find Method' 					#catalogID: #browser ) 				#nameKey: #'Find Method' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #findSelector ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Senders 					#defaultString: 'Senders' 					#catalogID: #browser ) 				#nameKey: #'Global Senders' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorReferences ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Implementors 					#defaultString: 'Implementors' 					#catalogID: #browser ) 				#nameKey: #'Global Implementors' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #selectorImplementors ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ExtractMethod 					#defaultString: 'Extract Method' 					#catalogID: #browser ) 				#nameKey: #'Extract Method' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #extractMethod ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_UseAssertDescription 					#defaultString: 'Use Assert' 					#catalogID: #browser ) 				#nameKey: #'Use Assert' 				#value: 				#action: 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #properties ) ) ) #(1 3 2 3 3 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool class</class-id> <category>resources</category><body package="Experiment" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Accept 					#defaultString: '&amp;Accept' 					#catalogID: #browser ) 				#nameKey: #Accept 				#value: 				#action: 				#shortcutKeyCharacter: $S 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #F_ormat 					#defaultString: 'F&amp;ormat' 					#catalogID: #browser ) 				#nameKey: #'Format Code' 				#value: 				#action: 				#shortcutKeyCharacter: $O 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #GoToClass 					#defaultString: 'Go to Class' 					#catalogID: #browser ) 				#nameKey: #'Navigate to Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseClassInNewWindow 					#defaultString: 'Browse Class in New Window' 					#catalogID: #browser ) 				#nameKey: #'Open Browser on Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected 				#shortcutKeyCharacter: #F12 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseReferencesToClass 					#defaultString: 'Browse References to Class' 					#catalogID: #browser ) 				#nameKey: #'Browse References to Class' 				#value: 				#action: 				#enablementSelector: #hasClassSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariableRe_ferencesDots 					#defaultString: 'Browse Variable Re&amp;ferences...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable References' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariableRea_dersDots 					#defaultString: 'Browse Variable Rea&amp;ders...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Readers' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #BrowseVariable_WritersDots 					#defaultString: 'Browse Variable &amp;Writers...' 					#catalogID: #browser ) 				#nameKey: #'Selected Global Instance Variable Writers' 				#value: 				#action: 				#enablementSelector: #hasInstanceVariableSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse_SendersOfSelector 					#defaultString: 'Browse &amp;Senders of Selector' 					#catalogID: #browser ) 				#nameKey: #'Selected Message References' 				#value: 				#action: 				#enablementSelector: #hasMessageNodeSelected 				#shortcutKeyCharacter: #F11 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browse_ImplementorsOfSelector 					#defaultString: 'Browse &amp;Implementors of Selector' 					#catalogID: #browser ) 				#nameKey: #'Selected Message Implementors' 				#value: 				#action: 				#enablementSelector: #hasMessageNodeSelected 				#shortcutKeyCharacter: #F12 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refactor 					#defaultString: 'Refactor' 					#catalogID: #browser ) 				#nameKey: #refactorMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractValueToTemporary 								#defaultString: '&amp;Extract Value to Temporary' 								#catalogID: #browser ) 							#nameKey: #'Extract to Temporary' 							#value: 							#action: 							#enablementSelector: #hasValueNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_nameVariableAsDots 								#defaultString: 'Re&amp;name Variable As...' 								#catalogID: #browser ) 							#nameKey: #'Rename Selected Temporary Variable' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 3 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #MoveToInner_Scope 								#defaultString: 'Move to Inner &amp;Scope' 								#catalogID: #browser ) 							#nameKey: #'Move Selected Temporary to Innermost Scope' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Con_vertToInstanceVariable 								#defaultString: 'Con&amp;vert to Instance Variable' 								#catalogID: #browser ) 							#nameKey: #'Convert Temporary Variable to Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_RemoveParameter 								#defaultString: '&amp;Remove Parameter' 								#catalogID: #browser ) 							#nameKey: #'Remove Selected Parameter' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #In_lineParameter 								#defaultString: 'In&amp;line Parameter' 								#catalogID: #browser ) 							#nameKey: #'Inline Selected Parameter' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #In_lineMethod 								#defaultString: 'In&amp;line Method' 								#catalogID: #browser ) 							#nameKey: #'Inline Method' 							#value: 							#action: 							#enablementSelector: #hasMessageNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractToTemporary 								#defaultString: '&amp;Extract to Temporary' 								#catalogID: #browser ) 							#nameKey: #'Extract to Temporary' 							#value: 							#action: 							#enablementSelector: #hasMessageNodeSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_UseAssertDescription 								#defaultString: '&amp;Use Assert Description' 								#catalogID: #browser ) 							#nameKey: #'Use Assert' 							#value: 							#action: 							#enablementSelector: #hasTemporaryVariableSelected 							#shortcutKeyCharacter: $U 							#shortcutModifiers: 3 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_InlineAssignedTemporary 								#defaultString: '&amp;Inline Assigned Temporary' 								#catalogID: #browser ) 							#nameKey: #'Inline Temporary' 							#value: 							#action: 							#enablementSelector: #hasAssignmentSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Re_nameVariableAsDots 								#defaultString: 'Re&amp;name Variable As...' 								#catalogID: #browser ) 							#nameKey: #'Rename Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected 							#shortcutKeyCharacter: $N 							#shortcutModifiers: 3 ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #PushVariable_Up 								#defaultString: 'Push Variable &amp;Up' 								#catalogID: #browser ) 							#nameKey: #'Push Up Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #CreateAccessors 								#defaultString: 'Create Accessors' 								#catalogID: #browser ) 							#nameKey: #'Create Selected Instance Variable Accessors' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #MakeVariableA_bstract 								#defaultString: 'Make Variable A&amp;bstract' 								#catalogID: #browser ) 							#nameKey: #'Abstract Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ProtectVariable 								#defaultString: '&amp;Protect Variable' 								#catalogID: #browser ) 							#nameKey: #'Protect Selected Instance Variable' 							#value: 							#action: 							#enablementSelector: #hasInstanceVariableSelected ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ExtractMethod 								#defaultString: '&amp;Extract Method' 								#catalogID: #browser ) 							#nameKey: #'Extract Method' 							#value: 							#action: 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #extractMethod ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ExtractMethodToComponent 								#defaultString: 'Extract Method to Component' 								#catalogID: #browser ) 							#nameKey: #'Extract Method to Component' 							#value: 							#action: ) ) #(15 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DoIt 					#defaultString: '&amp;Do it' 					#catalogID: #browser ) 				#nameKey: #'Do It' 				#value: 				#action: 				#shortcutKeyCharacter: $d 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #doIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Pri_ntIt 					#defaultString: 'Pri&amp;nt it' 					#catalogID: #browser ) 				#nameKey: #'Print It' 				#value: 				#action: 				#shortcutKeyCharacter: $p 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #printIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_InspectIt 					#defaultString: '&amp;Inspect it' 					#catalogID: #browser ) 				#nameKey: #'Inspect It' 				#value: 				#action: 				#shortcutKeyCharacter: $q 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #inspectIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_DebugIt 					#defaultString: '&amp;Debug it' 					#catalogID: #browser ) 				#nameKey: #'Debug It' 				#value: 				#action: 				#shortcutKeyCharacter: $B 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugIt ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Explain 					#defaultString: 'Explain' 					#catalogID: #browser ) 				#nameKey: #'Explain Code' 				#value: 				#action: 				#shortcutKeyCharacter: $E 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cu_t 					#defaultString: 'Cu&amp;t' 					#catalogID: #browser ) 				#nameKey: #'Cut Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #cut ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #copy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Paste 					#defaultString: '&amp;Paste' 					#catalogID: #browser ) 				#nameKey: #'Paste Selection' 				#value: 				#action: 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 2 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #paste ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#shortcutKeyCharacter: $L 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ReplaceDots 					#defaultString: '&amp;Replace...' 					#catalogID: #browser ) 				#nameKey: #'Replace Text' 				#value: 				#action: 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_HighlightSelection 					#defaultString: 'Highlight Selection' 					#catalogID: #browser ) 				#nameKey: #'Highlight Selection' 				#value: 				#action: 				#shortcutKeyCharacter: #F1 				#shortcutModifiers: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Cancel 					#defaultString: 'Cancel' 					#catalogID: #browser ) 				#nameKey: #Cancel 				#value: 				#action: ) ) #(2 9 4 1 3 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>CraftedSmalltalk.DebuggerClient class</class-id> <category>resources</category><body package="Experiment" selector="toolbarMenu">toolbarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolbarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #StepInto 					#defaultString: 'Step Into' 					#catalogID: #pdp ) 				#nameKey: #send 				#value: #send 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugStepInto ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #StepIntoButtonHelp 					#defaultString: 'Step, stepping into message sends' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Step 					#defaultString: 'Step' 					#catalogID: #pdp ) 				#nameKey: #stepIntoBlock 				#value: #stepIntoBlock 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugStep ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #StepButtonHelp 					#defaultString: 'Step' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #StepOver 					#defaultString: 'Step Over' 					#catalogID: #pdp ) 				#nameKey: #step 				#value: #step 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugStepOver ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #StepOverButtonHelp 					#defaultString: 'Step, stepping over blocks' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Restart 					#defaultString: 'Restart' 					#catalogID: #pdp ) 				#nameKey: #reenter 				#value: #reenter 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugRestart ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #RestartButtonHelp 					#defaultString: 'Restart execution from the beginning of this context' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Return 					#defaultString: 'Return' 					#catalogID: #pdp ) 				#nameKey: #return 				#value: #return 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugReturn ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #ReturnButtonHelp 					#defaultString: 'Return from this context' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RunToCaret 					#defaultString: 'Run to Caret' 					#catalogID: #pdp ) 				#nameKey: #skip 				#value: #skipToCaret 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugRunToCaret ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #RunToCaretButtonHelp 					#defaultString: 'Run to caret' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #JumpToCaret 					#defaultString: 'Jump to Caret' 					#catalogID: #pdp ) 				#nameKey: #jumpToCaret 				#value: #jumpToCaret 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugJumpToCaret ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #JumpToCaretButtonHelp 					#defaultString: 'Jump to caret without executing any code' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Run 					#defaultString: 'Run' 					#catalogID: #pdp ) 				#nameKey: #continue 				#value: #continue 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #debugRun ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #RunButtonHelp 					#defaultString: 'Run' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RunWithBreakOnReturn 					#defaultString: 'Run with Break on Return' 					#catalogID: #pdp ) 				#nameKey: #firstLoop 				#value: #firstLoop 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugFirstLoop ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #RunWithBreakOnReturnButtonHelp 					#defaultString: 'Run with break on return' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RunWithBreakAgain 					#defaultString: 'Run with Break Again' 					#catalogID: #pdp ) 				#nameKey: #nextLoop 				#value: #nextLoop 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugNextLoop ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #RunWithBreakAgainButtonHelp 					#defaultString: 'Run with break on return again' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Terminate 					#defaultString: 'Terminate' 					#catalogID: #pdp ) 				#value: #closeRequest 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #delete ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #TerminateButtonHelp 					#defaultString: 'Terminate this process and close the debugger' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #SelectHome 					#defaultString: 'Select Home' 					#catalogID: #pdp ) 				#nameKey: #selectHome 				#value: #selectHomeContext 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #home ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #SelectHomeButtonHelp 					#defaultString: 'Select the home of this context' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #InspectContext 					#defaultString: 'Inspect Context' 					#catalogID: #pdp ) 				#nameKey: #inspectContext 				#value: #inspectContext 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspect ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #InspectThisContextButtonHelp 					#defaultString: 'Inspect this context' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Abort 					#defaultString: 'Abort' 					#catalogID: #pdp ) 				#nameKey: #abort 				#value: #abortDebugOperation 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #AbortButtonHelp 					#defaultString: 'Abort current debug operation' 					#catalogID: #pdp ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #UseAssertDescription 					#defaultString: 'Use Assert' 					#catalogID: #pdp ) 				#nameKey: #'Use Assert' 				#value: #useAssertDescription 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #properties ) ) ) #(3 4 1 2 1 2 2 ) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>MethodRefactoring</name><environment>Refactory.Browser</environment><super>Refactory.Browser.Refactoring</super><private>false</private><indexed-type>none</indexed-type><inst-vars>class </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings</category><attributes><package>Browser-Refactorings</package></attributes></class><class><name>DebuggerService</name><environment>CraftedSmalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processHandle oldCursor receiverInspector contextInspector stackInspector sourceMap currentContext pendingEvents continueInDebuggerCtx finishBlock selector tags stepProbes label serviceProcess selectionRange contextStackPolicy dontUpdateInspectors safeMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Debugger-Support</package></attributes></class><class><name>DebuggerClient</name><environment>CraftedSmalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>service tags contextIndex busy text parsedSource parseTree stackList stackEmphases enableStackFiltering shortClassNames closeAction terminated </inst-vars><class-inst-vars>menuHolder </class-inst-vars><imports>			Refactory.Browser.BrowserEnvironment			Refactory.Browser.RefactoringBrowser			Refactory.Browser.RBParser			</imports><category>Tools-Programming</category><attributes><package>Debugger-UI</package></attributes></class><class><name>BrowserCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modified initialLookPrefs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>TextEditorController</name><environment>UI</environment><super>UI.ParagraphEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accepted autoAccept continuousAccept dispatcher keyboardHook keyboardProcessor readOnly tabMeansNextField tabRequiresControl valueDispatched </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBasics-Controllers</category><attributes><package>UIBasics-Controllers</package></attributes></class></st-source>